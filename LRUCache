from collections import OrderedDict

class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = OrderedDict()

    def get(self, key: int) -> int:
        if key not in self.cache:
            return -1
        else:
            self.cache.move_to_end(key)
            return self.cache[key]

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            
            self.cache[key] = value
            self.cache.move_to_end(key)
        else:
            if len(self.cache) >= self.capacity:
                # If capacity is exceeded, remove the first item (least recently used)
                self.cache.popitem(last=False)
            # Add the new key-value pair to the cache
            self.cache[key] = value


cache = LRUCache(2)
cache.put(1, 1)
cache.put(2, 2)
print(cache.get(1)) 
cache.put(3, 3)
print(cache.get(2)) 
cache.put(4, 4)
print(cache.get(1))  
print(cache.get(3))
print(cache.get(4))  



output:- 
/dev/fd/12:18: command not found: compdef
(base) mahakgupta@Mahaks-MacBook-Pro ~ %  /usr/bin/env /usr/bin/python3 /Users/mahakgupta/.vscode/extensions/ms-python.python-2023.12.0/pythonFiles/lib/python/de
bugpy/adapter/../../debugpy/launcher 49213 -- /Users/mahakgupta/LRUCache.py 
1
-1
-1
3
4
(base) mahakgupta@Mahaks-MacBook-Pro ~ % 
